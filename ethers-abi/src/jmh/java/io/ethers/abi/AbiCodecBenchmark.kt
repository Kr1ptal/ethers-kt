package io.ethers.abi

import io.ethers.core.types.Bytes
import org.openjdk.jmh.annotations.Benchmark
import org.openjdk.jmh.annotations.BenchmarkMode
import org.openjdk.jmh.annotations.Fork
import org.openjdk.jmh.annotations.Mode
import org.openjdk.jmh.annotations.OutputTimeUnit
import org.openjdk.jmh.profile.GCProfiler
import org.openjdk.jmh.runner.Runner
import org.openjdk.jmh.runner.options.OptionsBuilder
import java.util.concurrent.TimeUnit

@Fork(value = 1)
@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
open class AbiCodecBenchmark {
    @Benchmark
    fun decodeArrayOfUint256() {
        FUNCTION_UINT256.decodeCall(DECODE_DATA_UINT256)
    }

    @Benchmark
    fun encodeArrayOfUint256() {
        FUNCTION_UINT256.encodeCall(ENCODE_DATA_UINT256)
    }

    @Benchmark
    fun decodeComplex() {
        FUNCTION_COMPLEX.decodeCall(DECODE_DATA_COMPLEX)
    }

    @Benchmark
    fun encodeComplex() {
        FUNCTION_COMPLEX.encodeCall(ENCODE_DATA_COMPLEX)
    }

    @Benchmark
    fun decodeNestedFixedArray() {
        FUNCTION_NESTED_FIXED_ARRAY.decodeCall(DECODE_DATA_NESTED_FIXED_ARRAY)
    }

    @Benchmark
    fun encodeNestedFixedArray() {
        FUNCTION_NESTED_FIXED_ARRAY.encodeCall(ENCODE_DATA_NESTED_FIXED_ARRAY)
    }

    companion object {
        private val FUNCTION_UINT256 = AbiFunction.parseSignature("test(uint256[])")
        private val DECODE_DATA_UINT256 = Bytes(
            "ca160684000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000100b1a2bc2ec50000e0dd985ab6d8c1e011f7633f0d8bb8fd50cbaeb8000000000300000000030d40164131dab41e9655319a47829e407c42264d052f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000131000000000000000000000000000000000000000000000000000000000000000000000018128acb08061a80f3d0d3e351a33c311fd7154e87a68ddf2cc9525f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164131dab41e9655319a47829e407c42264d052f0000000000000000000000000000000000000000000000000000000000000001fffffffffffffffffffffffffffffffffffffffffffffffffbf44bf6c11d627a00000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000224000000330000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000f0000000002a9059cbb030d40c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000009cbfb60a09a9a33a10312da0f39977cbdb7fde2300000000000000000000000000000000000000000000000000f14e740b623f440000000002a9059cbb030d40c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c729d2eca173ceedcae043d976a7793c1700941000000000000000000000000000000000000000000000000031a659533805e420000000005022c0d9f030d409cbfb60a09a9a33a10312da0f39977cbdb7fde2300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f42e7da10d0d7280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164131dab41e9655319a47829e407c42264d052f0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        )
        private val ENCODE_DATA_UINT256: List<Any> = FUNCTION_UINT256.decodeCall(DECODE_DATA_UINT256)

        private val FUNCTION_COMPLEX = AbiFunction.parseSignature(
            "complex((int8,uint256,bytes)[],address[2],(bytes,(bytes12, address)))",
        )
        private val DECODE_DATA_COMPLEX = Bytes(
            "edc661ca0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000444444444444444444444444444444444444444400000000000000000000000022222222222222222222222222222222222222220000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000320fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3000000000000000000000000000000000000000000000006badc790fb58880cc0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001b0123488325884234009099590209921491292497959149325834850000000000000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000000000046be63fe320cc000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000070112414532348500000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8800000000000000000000000000000000000000000000000000000000076b0318000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000081124abcde2145565000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000000000046be63fe320cc000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000070112414532348500000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3000000000000000000000000000000000000000000000006badc790fb58880cc0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001b01234883258842340090995902099214912924979591493258348500000000000000000000000000000000000000000000000000000000000000000000000060123456789abc123456789abc00000000000000000000000000000000000000000000000000000000000000002222222222222222222222222222222222222222000000000000000000000000000000000000000000000000000000000000003312423523abcdef32194129529dead124182347324237126412461241242141247127461246127467126784612641254deadead00000000000000000000000000",
        )
        private val ENCODE_DATA_COMPLEX: List<Any> = FUNCTION_COMPLEX.decodeCall(DECODE_DATA_COMPLEX)
        private val FUNCTION_NESTED_FIXED_ARRAY = AbiFunction.parseSignature("test(uint256[3][4][4])")
        private val DECODE_DATA_NESTED_FIXED_ARRAY = Bytes(
            "c404104b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000765fd6c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000001e8b23b400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000540410000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000001322027d00000000000000000000000000000000000000000000000000000000000347d300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000765fd6c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000001e8b23b400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000001322027d00000000000000000000000000000000000000000000000000000000000347d3000000000000000000000000000000000000000000000000000000000012f09f000000000000000000000000000000000000000000000000000000000000d01400000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000001e8b23b400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000540410000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000001322027d00000000000000000000000000000000000000000000000000000000000347d3000000000000000000000000000000000000000000000000000000000012f09f000000000000000000000000000000000000000000000000000000000000d014000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000765fd6c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000001e8b23b40000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000054041000000000000000000000000000000000000000000000000000000000012f09f000000000000000000000000000000000000000000000000000000000000d0140000000000000000000000000000000000000000000000000000000000000009",
        )
        private val ENCODE_DATA_NESTED_FIXED_ARRAY: List<Any> = FUNCTION_NESTED_FIXED_ARRAY.decodeCall(
            DECODE_DATA_NESTED_FIXED_ARRAY,
        )

        @JvmStatic
        fun main(args: Array<String>) {
            val options = OptionsBuilder()
                .include(AbiCodecBenchmark::class.java.simpleName)
                .addProfiler(GCProfiler::class.java)
                //.addProfiler(JavaFlightRecorderProfiler::class.java)
                .warmupIterations(3)
                .measurementIterations(3)
                .build()

            Runner(options).run()
        }
    }
}
